package ch02.sec02;

public class IntegerLiteralExample {

	public static void main(String[] args) {
		// 01. 진수 
		// 진수(진법) : 정수를 표현할 때 사용되는 수 표현 방법
		// Java는 기본적으로 10진수를 사용, 정수 리터럴 작성할 때는 10진수가 기본적으로 사용된다
		
		// 다양한 정수 리터럴을 int 변수에 대입하고 10진수로 출력
		int var1 = 0b1011; 	// 2진수 : 0b 또는 0B로 시작하고 0과 1로 작성
		int var2 = 0206; 	// 8진수 : 0으로 시작하고 0~7 숫자로 작성
		int var3 = 365; 	// 10진수 : 소수점이 없는 0~9 숫자로 작성
		int var4 = 0xB3; 	// 16진수 : 0x 또는 0X로 시작하고 0~9 숫자나 A~F, a~f로 작성
		
		System.out.println("var1: " + var1);
		System.out.println("var2: " + var2);
		System.out.println("var3: " + var3);
		System.out.println("var4: " + var4);
		
		
		// 02. 이진 데이터(2진수)의 양수 표현 방식
		
		// 컴퓨터는 10진수 데이터를 2진수 데이터로 변환하여 저장되는데
		// 이 때 2진수로 변환된 데이터 하나를 담는 최소 공간단위 == 비트(bit)
				
		// 2 진수			->		10진수				
		// 1	1	1	1	1	1	1	1
		// 128	64	32	16	8	4	2	1
				
		// 10 진수		->		2진수			
		// 1			->		1			1비트가 사용됨		
		// 2			->		10			2비트가 사용됨			 
		// 3			->		11			2비트가 사용됨			
		// 4			->		100			3비트가 사용됨			
		// 5			->		101			3비트가 사용됨			
		// 8			->		1000		4비트가 사용됨			
		// 31			->		11111		5비트가 사용됨		
		// 44			->		101100		6비트가 사용됨	
		// 112			->		1110000		7비트가 사용됨			
		// 255			->		11111111	8비트가 사용됨		
		// 256			->		100000000	9비트가 사용됨		

				
		// 03. 이진 데이터(2진수)의 음수 표현 방식
				
		// CPU는 가산회로에 의해서 데이터에 대한 덧셈연산이 가능
		// CPU는 감산기(감산회로)에 의해서 데이터에 대한 뺄셈 연산을 불가
		// CPU는 애초에 가연산에 특화되어있는 명령 처리 장치
				
		// 컴퓨터는 보수 개념을 사용해서 뺄셈을 처리	
		// 보수 : 각 자라의 숫자의 합이 일정한 수가 되게 하는 수
		// 어느 수에 대한 반전, 뒤집는 개념
				
		// 1: 보수의 개념				1	1	1	1	1	1	
		// -의 개념이 됨				64	32	16	8	4	2	1
				
		// 0: 보수의 개념				1	1	1	1	1	1	
		// +의 개념이 됨				64	32	16	8	4	2	1
						
		// 1byte = 8bit
				
		// -126
		// 1	0	0	0	0	0	1	0 = -128 + 2 = -126
		
	}

}
